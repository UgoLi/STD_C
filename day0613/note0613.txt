指针和存储区的捆绑关系可以随程序运行不断改变

这个时候可以把指针看作存储区的某种特征，可以通过这个指针操作存储区的这个特征
或者某种身份

如果把一个指针和数组的第一个存储区捆绑就可通过这个指针找到数组里的每个存储区
这时候可以认为指针间接捆绑了数组的每个存储区，可以在指针的后面加下标

地址数据可以参与如下计算过程：
    地址+整数 地址-整数 地址-地址

地址数据加减整数n，实际上是加减n个捆绑存储区的大小。
    数组名加下标可以得到下标对应存储区的地址
    可以采用如下 下标表示数组里的存储区
    *（arr+num)
    其中arr是数组名称，num是一个下标
    如果p_num指针记录了数组名称代表的地址记就可以用下面的写法替换
    *（p_num+num）
地址数据减地址数据代表两个地址之间包含的捆绑存储区个数。
    
    声明指针变量的时候经常使用const关键字
    1、如果声明指针变量时把const关键字写在类型名称前面表示不可以通过指针对他所捆绑的存储区赋值，但可以对指针本身赋值。
    2、如果声明指针变量的时候把const关键字写咋指针变量的名称前就表示不可以对这种指针做赋值，但可以通过此指针对他的捆绑数据区做赋值

    可以在声明指针的时候使用void作为类型名称
    1、这种指针叫做无类型指针,可以和任意类型存储区捆绑，但不能通过这种指针知道捆绑存储区的类型
    2、不应该在这种指针前面直接加*，也不应该直接用它进行加减整数的计算
    3、这种指针使用前必须首先强制类型转换成有类型指针，然后才能使用
    
    所有跨函数使用存储区都是通过指针实现的。
    1、数组做形式参数的时候，正真的形式参数就是一个指针
    2、如果函数指针形参没有改变（指针所捆绑的数据区未做改变可以在指针类型定义前加 const），声明指针形式参数时尽量使用const关键字
    3、无类型指针通常作为指针形式参数使用
    4、使用地址作为返回值可以让调用函数使用被调用函数存储区，这时候被调用函数需要提供一个指针类型存储区，作为返回值的地址。不可以把非静态局部变量的地址作为返回值使用。

    1、c语言里所有文字信息都必须记录在一组连续的字符型存储区里
    2、所有文字信息必须以'\0'字符作为结尾，这个字符的ASCII码就是0
    符合以上两点的内容叫字符串，它们可以用来记录文字信息
    字符串里'\0'字符前面的内容是有效字符
    所有的字符串都可以用一个字符指针表示
    字符串字面值是一种字符串，用两个双引号中间的一组字符可以表示字符串字面值，例如“abc”等
    编译器在编译的时候会自动在字符串面值的木位加上一个'\0'字符
    编译器在编译的时候会把字符串字面值替换成第一个字符所在的地址
    字符串的内容在程序运行过程中不可以改变
    所有内容一样的字符串字面值其实是同一个
    多个并列的字符串字面值会被合并成一个
    字符数组也可以用来记录字符串，只有包含'\0'字符的数组才可以当字符串使用
    可以采用字符串字面值对字符数组进行初始化，字符串字面值最后的'\0'字符也会被初始化到数组里
   字符数组里字符串的内容可以修改
    printf函数调用语句里使用%s做站位符可以把字符串里所有字符都显示在屏幕上

    预习
    1、字符串








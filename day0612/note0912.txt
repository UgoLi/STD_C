函数

    数组作形参的时候只是把形式参数写成数组的样子，正真的形式参数不是数组而是一个可以当作数组使用的变量
    数组形式参数里所包含的所有存储器都不是被调函数分配的
    声明数组形式的形式参数可以省略括号中的数字（这个时候需要提供另一个整数类型的形式参数用来表示数组参数里的存储区个数）
    数组形式参数的存储区可以让调用函数和被调函数双方使用(通过这种方式让被调用函数使用其他函数的存储区)
    数组形式参数可用来实现双向数据传递，这种参数叫输入输出参数

    c语言里函数参数的个数可以不固定
    这种参数叫变长参数
    变长参数不能事先命名，被调用函数需要使用特殊方法才能获取变长参数的内容
    如果编译器首先遇到函数调用语句就猜测函数的格式。猜测结果里函数有一个整数类型的存储区用来存放返回值，函数可以接受任意多个不确定类型的形式参数。
        这个猜测的结果叫做函数的隐式声明
        函数隐式声明参数的类型只能是int或double
        如果隐式声明的格式和函数的真实格式不一致则编译器会出错
    函数大括号前面的部分可以单独写成一条语句，这条语句叫函数声明语句
    函数声明语句里可以省略形式参数名称。
    把函数声明语句写在文件开头叫做函数的显示声明
    函数显示声明会消除隐式声明
    除了主函数的其他所有函数都应进行显示声明

exit函数可以随时结束程序的执行
    为了使用使用这个标准函数需要包含stdli.h头文件
    这个函数的需要一个整形的实际参数，这个参数的作用和主函数返回值的作用一样
    
递归函数：
    可以自己调用自己的函数叫做递归函数
    如果一个复杂问题可以分解成多个小问题，其中至少一个小问题和原来问题本质上一样但是稍微简单一点，这种问题就可以用递归函数解决

递归函数的编写步骤：
1、编写语句解决分解后的每个小问题
    (假设递归函数已经可以使用)
2、在递归开始编写分支解决不能分解的情况（这个分支必须保证函数可以结束）

采用递归函数解决问题的思路叫递归
采用循环解决问题的思路叫递推

    检验递归函数的时候首先用最简单的参数做测试，然后逐渐把参数变复杂测试。如果所有参数都能得到正确结果说明函数编写正确

变量只能被一组语句使用，这组语句叫做变量的作用域
    声明在函数里面的变量叫做局部变量，局部变量的作用域包含函数里面的所有语句
    全局变量的作用域包含程序里的所有语句。
    没有初始化的全局变量自动初始化为零。
    局部变量和全局变量可以重名，此时变量名称优先代表局部变量

如果全局变量和局部变量都能解决问题就应该优先使用局部变量
存储区的使用不受作用域限制（可以跨函数使用存储区）
    存储区的使用受到生命周期的限制
    生命周期：是一段时间，在生命周期开始时计算机为程序分配存储区，在生命周期结束时计算机收回存储区
        全局变量的生命周期是程序的整个执行期间。
        局部变量的生命周期是函数某一次的执行时间 。
        当函数开始执行的时候计算机为局部变量分配存储区，函数结束时计算机把局部变量的存储区收回。
        如果函数多次执行则每次执行为局部变量分配的存储区都有可能是新的

声明变量时可以使用static关键字，静态变量
    不论局部还是全局变量都可以声明成静态
    所有静态变量的生命周期都是整个程序的执行时间
静态局部变量的存储区不会改变，没有初始化的静态局部变量会被初始化为0
    静态局部存储区可以被所有函数使用
    静态变量的初始化只在程序开始的时候执行一次
静态全局变量的作用域是声明他的那个文件里面的所有语句（不可以跨文件使用静态全局变量）

变量的作用域分三种情况：
    局部（函数）、非静态全局变量（程序）、静态全局变量（文件）
变量的生命周期分二种：
    非静态局部变量和其他

指针变量用来记录地址数据
    只有记录有效地址的指针才能使用
    声明指针变量的时候需要在变量名称前加*
    如果一个指针记录了一个存储区的地址就可以说他们之间存在捆绑关系
    如果一个指针和一个普通变量的存储区实现了捆绑，就可以在指针前使用*表示它所捆绑的普通变量存储区
    指针变量也分类型，不同类型的指针适合与不同类型的存储区捆绑
    可以在一条语句里声明多个同类型指针变量，每个指针变量名称前都要加*
    没有捆绑的指针分为两类：
        1、空指针记录空地址（NULL），这个地址数值的数值就是数字0
        2、其他没有的捆绑的指针都叫野指针

    为了保证能区分程序中的指针是否捆绑过，要求程序中禁止野指针
    所有指针变量必须初始化
    +指针变量初始化的时候，*没有参与赋值过程
    

































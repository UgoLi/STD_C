枚举也可以用来创建新的数据类型
枚举类型存储区

枚举类型也要声明才能使用
声明枚举类型时需要使用enum关键字
枚举型变量名称可以省略，枚举类型存储区就是整型存储区

声明枚举类型时需要提供一组名称，计算机为每个名称分配一个对应的整数，只有这些整数可以记录到枚举类型存储区
不同枚举类型存储区所能记录的整数范围不同
计算机把从0开始的一组连续的非负数分配到枚举类型的所有名称
可以在声明枚举类型的时候指定某个名称对应的整数，它后面名称对应的名称也对应改变

声明联合也可以用来创建新的数据类型，联合声明前需要使用union关键字
联合成员变量对应的存储区是互相重叠的
联合成员变量存储区的开始地址都一样

联合的存储区可以当成多种不同类型存储区使用，每个成员变量代表了一种可以选的类型
联合存储区大小是最大成员变量存储区大小

二级指针前加**可以可以表示捆绑的普通变量存储区
二级指针前加*表示捆绑的一级指针存储气区

无类型指针有可能和一级指针存储区捆绑，这种指针使用之前必须首先强制类型转换成二级指针才能使用
二级指针通常作为形式参数使用，可以通过这种形式参数从调用函数向被调用函数传递一个一级指针存储区

C语言里函数也有地址
函数的地址可以用函数名称表示
函数指针可以用来记录函数的地址
函数指针也需要先声明然后才能使用
函数指针声明可以根据函数声明变化得到
函数指针也分类型，不同类型的函数指针适合与不同类型的函数捆绑
函数指针可以用来调用函数

函数指针可以作为形式参数使用
会作为实际参数使用的函数叫做回调函数

可以在程序运行的时候临时决定需要分配的存储区数量
    这种分配存储区的方法叫做动态内存分配
     为了管理动态内存分配需要使用一组标准函数
     使用这些标准函数需要包含stdlib.h头文件
     1、malloc可以分配一组连续的字节
        这个函数需要一个整数类型参数表示希望分配的字节个数
        返回值表示分配好的第一个字节的地址
        如果分配失败则返回空地址
        *函数把返回值记录在一个无类型指针的存储区里，必须首先强制转换成有类型指针才能使用
        *当不再使用动态内存分配后必须使用专门的语句将它还给计算机，叫内存的释放
     2、free函数可以用来释放动态分配内存
        这个函数需要动态分配的第一个字节的地址作为参数
        一起分配的内存必须一起释放
        如果使用指针为参数调用free函数则
          函数结束后指针成为野指针，必须恢复成空指针
        
        调用函数可以使用被调用函数动态分配内存
         

预习
    1、文件操作

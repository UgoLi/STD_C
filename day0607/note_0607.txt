rand()  产生（伪）随机数 stdlib.h
srand（） 设置随即数种子 stdlib.h
time（0 ） 获取时间 time.h

分支和循环都可以让程序中的语句不再从上到下顺序执行，他们都叫流程控制语句

goto也是流程控制语句
    可以把任意一条语句指定为下一条语句
    尽量不要用goto，影响程序结构
如果一个问题的解决过程可以用多组数字的变化过程描述，而且不同数字的变化频率不同，这在问题就可以采用多重循环结构来解决。
    外部循环变量代表变化慢的数字，内部循环变量代表变化快的数字

while 关键字也可以编写循环
    格式自由，不方便使用for关键字写的循环才需要考虑使用while关键字编写
    while循环格式
        while（逻辑表达式）
            {
                反复执行的语句；
            }
反复执行大括号里的语句，直到逻辑表达式为假
while关键字也可以实现死循环，此时逻辑表达式永远为整
while循环也可以用break和continue效果与for循环一样
whlie 循环会交替执行逻辑表达式和循环语句
while 循环第一步是逻辑表达式的计算
while 循环有可能不执行大括号语句

do...while 关键字也可以用来编写循环
do...while 循环的格式：
    do{
        循环体；
    }while（逻辑表达式）；
do...while循环结束后小括号后必须用；结束
do...while循环也是交替执行逻辑表达式和循环体
do...while循环第一步是执行循环体后进行逻辑表达式计算
do...while循环可以保证循环体至少执行一次


scanf 函数工作时数据首先从键盘输入缓冲区，然后程序从输入缓冲区里获得数字并记录到存储区
    用户先输入的数据首先进入输入缓冲区，先输入数据缓冲区的数据必须先处理
    可以采用如下两条语句把输入缓存区中无效的数字丢掉：
        scanf("%*[^\n]"); //将第一个换行及前面所以缓存全部丢掉
        scanf("%*c");
printf 函数把要显示的数据输出到输出缓存区里，在合适的时候输出到 屏幕上
    一下四种情况输出缓存区的内容会输出到屏幕上：
        1.如果输出缓存区里包含'\n'字符则它前面的内容会显示在屏幕上
        2.程序结束以后它放在输出缓存区的内容会放在屏幕上
        3.当输出缓存区被充满的时候它的里面内容也会输出到屏幕上
        4.可以使用ffush（stdout）语句强制把输出缓冲区的内容显示在屏幕上。PS：scanf（）也有同效果

数组可以代表内存一组连续的同类型存储区
    这些存储去叫做数组的元素
    数组也需要先声明才能使用：声明数组包括,类型，名称，存储区个个数。
    数组一旦存在以后它里面所包含的存储区个数就不可改变
    数组通常不会作为一个整体使用，一般一次只使用数组的一个存储区
    数组存储区有一个编号，不同存储区的编号不同。这个编号叫做数组的下标
    第一个存储区的下标为0，向后一次递增。
    有效下标范围从0开始到存储区个数减一为止，超过范围的下标不能使用。
    数组名和下标一起可以用来表示数组里的某个存储区。

    可以使用循环依次处理数组的每个存储区（遍历）。
    这个循环里每个循环变量依次代表每个有效下标。
    数组也应该初始化，初始化的时候可以提供多个初始化数据，所有初始化数据应该写在一对大括号中间，相邻数据用逗号隔开。
    如果初始化个数比存储区个数多，多余数据会丢失，少的后面会被初始化为0。
    如果初始化个数与存储区个数一样就可以省略数组声明里的存储区个数










































